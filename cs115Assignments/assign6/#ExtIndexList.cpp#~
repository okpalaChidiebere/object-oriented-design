/******************************************************
file name: ExtIndexList.cpp
student name: Okpala Chidiebere
student number:200356606
file purpose: used define the prototypes of the functions declared in ExtIndexList.h
 ****************************************************/
#include "ExtIndexList.h"


//declaring the function as a prototype
template<class T, int maxSize>
indexList<T, maxSize>::extIndexList()
{
  //do private date in the class to work on. only the inherited protected data used
}

template<class T,int maxSize>
bool indexList<T,maxSize>::linSearch(T target)
{
for(int i=0;i<size;i++)
  {
    if(element[i]==target)
      return true;
  }
 return false;
}

//declaring the function as a prototype
template<class T, int maxSize>
void indexList<T, maxSize>::selSort()  // a function with two parameters
{
  //local datas
  int search_index, search_max;
   T temp;

   for (int current_index = 0; current_index < size; current_index++) //a for-loop to access the list
   {
      search_max = current_index;

      // Find index of largest element in unsorted section of elements
      for(search_index = current_index + 1; search_index < size; search_index++)
	 if(elements[search_max] > elements[search_index])
	    search_max = search_index;

      // Exchange items at position search_max and current_index
      if (search_max > current_index)
      {
	 temp = elements[search_max];
	 elements[search_max] = elements[current_index];
	 elements[current_index] = temp;
      }
   }
}
 
template<class T,int maxsize>
extIndexList extIndexList<T,maxSize>::concatArray(const extIndexList & L,int size1,int size2)const
{
  extIndexList result;
  int gen_Size=size1+size2;
  for(int i=0;i<size1;i++)
    {
      result.elements[i]=elements[i];
      for(int j=0;j<size2;j++)
	{
	  result.elements[i]=L.elements[i];
	  i++;
	}
    }

  return result;
}


